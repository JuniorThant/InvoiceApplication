# type: ignore
"""add models and rules

Revision ID: 814d788003f0
Revises: c18a9a72e89f
Create Date: 2025-08-27 06:16:56.120785+00:00

"""
from __future__ import annotations

import warnings
from typing import TYPE_CHECKING

import sqlalchemy as sa
from alembic import op
from advanced_alchemy.types import EncryptedString, EncryptedText, GUID, ORA_JSONB, DateTimeUTC
from sqlalchemy import Text  # noqa: F401

if TYPE_CHECKING:
    from collections.abc import Sequence

__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

sa.GUID = GUID
sa.DateTimeUTC = DateTimeUTC
sa.ORA_JSONB = ORA_JSONB
sa.EncryptedString = EncryptedString
sa.EncryptedText = EncryptedText

# revision identifiers, used by Alembic.
revision = '814d788003f0'
down_revision = 'c18a9a72e89f'
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            schema_upgrades()
            data_upgrades()

def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)
        with op.get_context().autocommit_block():
            data_downgrades()
            schema_downgrades()

def schema_upgrades() -> None:
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('bank_info', schema=None) as batch_op:
        batch_op.create_table_comment(
        'Bank payment details for the invoice',
        existing_comment=None
    )

    with op.batch_alter_table('invoice', schema=None) as batch_op:
        batch_op.create_table_comment(
        'Invoice to the customer',
        existing_comment=None
    )

    with op.batch_alter_table('invoice_item', schema=None) as batch_op:
        batch_op.create_table_comment(
        'Line items belonging to an invoice',
        existing_comment=None
    )

    with op.batch_alter_table('receipt', schema=None) as batch_op:
        batch_op.create_table_comment(
        'Receipt to the customer',
        existing_comment=None
    )

    with op.batch_alter_table('user_account', schema=None) as batch_op:
        batch_op.create_table_comment(
        'User accounts for application access',
        existing_comment=None
    )

    with op.batch_alter_table('user_account_oauth', schema=None) as batch_op:
        batch_op.create_table_comment(
        'Registered OAUTH2 Accounts for Users',
        existing_comment=None
    )

    with op.batch_alter_table('user_account_role', schema=None) as batch_op:
        batch_op.create_table_comment(
        'Links a user to a specific role.',
        existing_comment=None
    )

    # ### end Alembic commands ###

def schema_downgrades() -> None:
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_account_role', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='Links a user to a specific role.'
    )

    with op.batch_alter_table('user_account_oauth', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='Registered OAUTH2 Accounts for Users'
    )

    with op.batch_alter_table('user_account', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='User accounts for application access'
    )

    with op.batch_alter_table('receipt', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='Receipt to the customer'
    )

    with op.batch_alter_table('invoice_item', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='Line items belonging to an invoice'
    )

    with op.batch_alter_table('invoice', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='Invoice to the customer'
    )

    with op.batch_alter_table('bank_info', schema=None) as batch_op:
        batch_op.drop_table_comment(
        existing_comment='Bank payment details for the invoice'
    )

    # ### end Alembic commands ###

def data_upgrades() -> None:
    """Add any optional data upgrade migrations here!"""

def data_downgrades() -> None:
    """Add any optional data downgrade migrations here!"""
